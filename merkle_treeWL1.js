// https://medium.com/@ItsCuzzo/using-merkle-trees-for-nft-whitelists-523b58ada3f9
//
// 1. Import libraries. Use `npm` package manager to install
const { MerkleTree } = require("merkletreejs");
const keccak256 = require("keccak256");

// 2. Collect list of wallet addresses from competition, raffle, etc.
// Store list of addresses in some data sheeet (Google Sheets or Excel)
let whitelistAddresses = [
	"0xd7539FCdC0aB79a7B688b04387cb128E75cb77Dc",
	"0x6E33e22f7aC5A4b58A93C7f6D8Da8b46c50A3E20",
	"0xC9dA7343583fA8Bb380A6F04A208C612F86C7701",
	"0x2AC89522CB415AC333E64F52a1a5693218cEBD58",
	"0xd90c6f6D37716b1Cc4dd2B116be42e8683550F45",
	"0x69ABF813a683391C0ec888351912E14590B56e88",
	"0x85924aA0B2cb5a0BbeC583Dd090bF7CEdBa5D2Ea",
	"0x9149B2b87159c4CC9e2f10C2711357720Da4DA08",
	"0xa0710d3b4BA0f848f7edf9CC827aF70A183EAd26",
	"0xAE1220f6bFEb414Ed0A95fbb5A6Ecc303b10aa46",
	"0xebe986802F7858E1919451C6Ff893e294F31CE54",
	"0x2d7cAA8462023af022A5004dA7b781b8ccF81Da7",
	"0xE26217836Dd71f49c58a68aD70DabFA1E6d0B75b",
	"0x7C572bE1751DdCFeE930286836bF21E6d87c10e6",
	"0x6fDcfFDBa2699543a926f0C092F769f3302D3519",
	"0x1BAfBebC93eFA8d68bC2B3FfC8124275336c4C36",
	"0xF9e11762d522ea29Dd78178c9BAf83b7B093aacc",
	"0xF624C52Ff68E8a2bE33d1C4b1dC6127E725E2Ef8",
	"0x0D492C9BFd27778EE42270f7E5bBD9B73CF56c49",
	"0xA670cF83E097583b9B77688161047B27f035C052",
	"0x104562bFddadE5F08582eCf2A4Cd61A3759696fA",
	"0x89261103FA88a913c8D0dEbD00574FD16895407D",
	"0x5B60117255df27FDD885629c0210D9DD975fF975",
	"0xff2469082cc5BF7e626fbfa9c25F467411d84cc2",
	"0xA4CeC28d686EE53BC80dD3d79b404CF0dCe28016",
	"0x14c6150db396FF57007f01E4b560D16C72905e51",
	"0x3047bf8e87F0786702B8e8265c3B04cEdbA920e3",
	"0x99ED04C212dD3929E9063bd78B26Ef41858CB62C",
	"0x0b11bB088ab8D25E213D773f4BbfD49C2cCd71A6",
	"0x522d634b6BFfb444FdbCdE5932738995A4cfd1F1",
	"0x05f39aB06cFBE54c73F0183dcb0a85520D44d7c2",
	"0x8126809eCfBEC13878f32c52DB18EC70B9d7fcc4",
	"0xb90781Ceb500f80A9c101225eD5451449a3Aa5bc",
	"0x56aa6a2A1b3E768fA24792385e3602E1E76E8643",
	"0xB5f0A2d8fD54a0CdD5f3e9C26874022CE85187E9",
	"0x652102C2748580D3a220D503855e376119B48d68",
	"0x00F731bcd3a8d541A040A7586FF3d03dea48e31f",
	"0x8c814A68c4Ac0Ccb75F1157b950998434F8C21b5",
	"0x2E45e558f76eb181176a61B6207e94DD77316aa2",
	"0x2269DE95c5AdB3b5ddEf6c196522A7a860d8831e",
	"0x00f949277F8D8218A8D41C46d9bB19c28e1E5be5",
	"0x396b392875fE3D0ffD8f6CD6Ff638b89f572D066",
	"0x141cBD79074e965f3c501D8B63b8e55157ED0722",
	"0x3811Eb9e4E525765AAAB95A8fb3c04061Ece3321",
	"0xdd6775682a8177F1ff6F4E347419d4DE3E126f4C",
	"0x86d2Ca1d9c49cF6EbD3fFc1F00404946Db11477c",
	"0xa20Cf54b8CA1EE82CFA6F6DA8288e4dbb8BB0456",
	"0x8E7C6faaCD4C30b0ea7E1982FDc9d003E3df3336",
	"0xE0F328b6da3bcC21f9507ca3097DDaCb20de1A43",
	"0xecaafa79c14e74fc24BFAbD1BdDB7CA760c28d7A",
	"0xC248C5235f211ea6873BB912dCD6c8C3D6a52db7",
	"0xF9107317B0fF77eD5b7ADea15e50514A3564002B",
	"0x0eb68b83821857f6aD0347e0f111A33C5bAAd3e3",
	"0x173216D1fD08e76FD4f25710d2849091cE2fb026",
	"0xba750c8F68B394C2e823D988ECd583A977f5eb21",
	"0xf97Ac4cC2A912a5A9A42672c9e0d95e867F6e12D",
	"0x30beeA416fB2599C8df88A1ee1c8e3B9392aB1cE",
	"0x1Bd398fDCfC181F99e7eBe3a765151504626165c",
	"0x5db1CEEbbD03d85b1439400853144eaFc459632B",
	"0x25B77f97b373556469Fed882f35832BceA6Ca931",
	"0x7EA4066237fFD02759abD20e9Cf6f8768b2D835D",
	"0xdaBc14dB1667def2d9B105e64649747271915d88",
	"0xF1cAf10C5Fe421660e8fdF2c0CDaA0be68633B3e",
	"0x2aCf03Dd652921386923f3d34E2840749372E63c",
	"0x3c0db21294EbD6f37BA5307aE0edbbe4e08660c9",
	"0x2890c5251a2CD6b12821F2658dACC794370c1653",
	"0x67770b782Cfab1dA42A0079C35Ee47e49D89c584",
	"0xe587A3dDB0773c292F70d3c75f3A1B72370D9077",
	"0xD77900479EF30963F4B5aA7d752b15795192eE15",
	"0x097FA8ABe56d69F95a8Fa9E2c6629275a4767Dcc",
	"0x50C1465A30C129c68d7a0ACaE28f424396eDD196",
	"0xC2db57d31E17AB3B5c70ABf832E65a0182545bDC",
	"0x877088766252Db019A0083Da0F1418019Ae37eb2",
	"0x1f84Ca2C0A406b32e083E4E41032FD148364Df48",
	"0x486309D2e876Ed0ffa5978613A0Aae997829F413",
	"0xc25d35024Dd497D3825115828994Bb08D12a3aa7",
	"0xeBDE145d290D1053940Eb11EA543e34a952ecf0F",
	"0xD5a41BFe8e373C94434eaB2fC81034eC00572b09",
	"0xe55CF1195EFc134126141779710eeD3420A8dba5",
	"0x06E2c09a4C02221992FeEB182482242aDb9174fe",
	"0x97D2767Db42135E1E2a5Fd7dd3e11646EF4d2b28",
	"0xb14F884adb66850BCd5F412393a123936a181681",
	"0x04D13D57bF2F60C4c5024FbA1a6CB20EfEA99a77",
	"0xd5a9C4a92dDE274e126f82b215Fccb511147Cd8e",
	"0x3B563F592c88A37Fdc97C63E3287E916Cd6918a4",
	"0xFff3DAA226fe6342f3818cb2df691448943b0448",
	"0xFBc4b108aB3EB86618EA3a5591Ea393cdA59F955",
	"0x44646C1823433071cb4d60E90738161F7a056cc1",
	"0x79b94191b6695e2267885B43728AA2cf8d5C56F5",
	"0x61aEd7E302D313AaA6a0B34c70019E670bd4f114",
	"0xA454987CD74AbBbE76ed172ACe6ef4824F5a202A",
	"0xBB4581bD9B34908A116bF48CD84ff785d4e751D3",
	"0x80b24081d3398198fb6BB424C80dd059116f5baf",
	"0x09d8D37669e92e915fF037691acbd2467DAC4A89",
	"0x3B5E33914100a2aa5543FD03aEc6b938FEBA75e6",
	"0x7630fD3013e157f99F7a5884241dbf5fC7ECcA78",
	"0xDA164b34e0a060939119D6B87d5F852703E98092",
	"0xFF5dF32FC2AD0421662109f6998FDf7Db30944A7",
	"0xef243BA3dadF2Ed16110A0E6B17317587e964623",
	"0x73Be5674F1Fd99bBd3B6Cd89DaecF59789328221",

	//From hardhat
	"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266", // 0
	"0x70997970C51812dc3A010C7d01b50e0d17dc79C8", // 1
	// From Remix
	"0x5B38Da6a701c568545dCfcB03FcB875f56beddC4",
	"0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2",
];

// 3. Create a new array of `leafNodes` by hashing all indexes of the `whitelistAddresses`
// using `keccak256`. Then creates a Merkle Tree object using keccak256 as the algorithm.
//
// The leaves, merkleTree, and rootHas are all PRE-DETERMINED prior to whitelist claim
const leafNodes = whitelistAddresses.map((addr) => keccak256(addr));
const merkleTree = new MerkleTree(leafNodes, keccak256, { sortPairs: true });

// 4. Get root hash of the `merkleeTree` in hexadecimal format (0x)
// Print out the Entire Merkle Tree.
const rootHashWL1 = merkleTree.getRoot();
//console.log("Whitelist Merkle Tree\n", merkleTree.toString());
//console.log("Root Hash: ", rootHashWL1);

// ***** ***** ***** ***** ***** ***** ***** ***** //

// CLIENT-SIDE: Use `msg.sender` address to query and API that returns the merkle proof
// required to derive the root hash of the Merkle Tree

// ✅ Positive verification of address
//const claimingAddress = leafNodes[5];
// ❌ Change this address to get a `false` verification
const claimingAddress = keccak256("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266");

// `getHexProofWL1` returns the neighbour leaf and all parent nodes hashes that will
// be required to derive the Merkle Trees root hash.

const hexProof = merkleTree.getHexProof(claimingAddress);
//console.log("hexProof: ", hexProof);

// ✅ - ❌: Verify is claiming address is in the merkle tree or not.
// This would be implemented in your Solidity Smart Contract
//console.log(merkleTree.verify(hexProof, claimingAddress, rootHashWL1));

function getHexProofWL1(addressTest) {
	let _claimAddress = keccak256(addressTest);
	let _hexProof = merkleTree.getHexProof(_claimAddress);
	return _hexProof;
}
module.exports = { rootHashWL1, getHexProofWL1 };
